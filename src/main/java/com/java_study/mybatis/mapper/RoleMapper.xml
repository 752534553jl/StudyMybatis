<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java_study.mybatis.mapper.RoleMapper">
    <!--自定义结果集,结果集的存储一般有2种：直接使用map存储（可读性性下降）;自定义结果集，在resultMap中引入POJO用于存储-->
    <!--resultMap作用：定义映射规则（SQL到JavaBean的映射）；级联的更新；定制类型转化器-->
    <resultMap id="roleMap" type="role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="note" column="note"/>
    </resultMap>
    <!--二级缓存开启-->
    <cache/>
    <insert id="insertRole" parameterType="role">
        insert  into  t_role(role_name,notes) values (#{roleName},#{note})
    </insert>
    <!--useGeneratedKey采用JDBC的Statement对象的getGenerateKeys方法返回主键，默认参数为false-->
    <!--keyProperty说明使用那个pojo的属性去匹配主键-->
    <insert id="insertRolekeys" parameterType="role" useGeneratedKeys="true" keyProperty="id">
        insert  into  t_role(role_name,notes) values (#{roleName},#{note})
    </insert>
    <!--自定义主键,采用selectKey元素设置-->
    <insert id="insertRoleMyKeys" parameterType="role">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            <!--自定义主键规则：记录为空则主键为1；记录不为空，id为当前id+3-->
            select if (max(id)=null,1,max (id)+3) from t_role
        </selectKey>
        insert  into  t_role(role_name,notes) values (#{roleName},#{note})
    </insert>
    <delete id="deleteRole" parameterType="long">
        delete  from t_role where id=#{id}
    </delete>

    <update id="updateRole" parameterType="role">
        update t_role set role_name=#{roleName} ,note=#{note} where id=#{id}
    </update>

    <select id="getRole" parameterType="Long" resultType="role">
        select id ,role_name as roleName,note from t_role where id =#{id}
    </select>
    <!--模糊查询-->
    <select id="findRoles" parameterType="string" resultType="role">
        select id role_name,as roleName,note from t_role
        where role_name like concat('%',#{roleName},'%')
    </select>
    <!--使用@Param传递多个参数，不需要给出参数类型，Mybatis会自动检索-->
    <select id="findRoleByAnntation" resultType="role">
        select id, role_name as roleName,note from t_role
        where role_name like concat('%',#{roleName},'%')
        and note like concat('%',#{note},'%')
    </select>
    <!--通过JavaBean传递多个参数-->
    <select id="findRoleByBean" parameterType="com.java_study.mybatis.Params.RoleParams" resultType="role">
        select id, role_name as roleName,note from t_role
        where role_name like concat('%',#{roleName},'%')
        and note like concat('%',#{note},'%')
    </select>
    <!--分页查询-->
    <select id="findByRowBounds" resultType="role">
        select id, role_name as roleName,note from t_role
        where role_name like concat('%',#{roleName},'%')
        and note like concat('%',#{note},'%')
    </select>
    <!--动态SQL之if和test标签的应用（单条件分支），实现简单的参数判空，减少多余数据-->
    <select id="findRoles01" parameterType="string" resultType="role">
        select id role_name,as roleName,note from t_role where 1=1
        <if test="roleName!=null and roleName!=''">
            and  role_name like concat('%',#{roleName},'%')
        </if>
    </select>
    <!--动态SQL之choose，when，otherwise标签的应用（多条件分支）-->
    <select id="findRoles02" parameterType="string" resultType="role">
        select id role_name,as roleName,note from t_role where 1=1
        <choose>
            <when test="roleNo!=null and roleNo!=''">
                and role_no=#{roleNo}
            </when>
            <when test="roleName!=null and roleName!=''">
                and role_name like concat('%',#{roleName},'%')
            </when>
            <otherwise>
                and note is not null
            </otherwise>
        </choose>
    </select>
    <!--动态SQL之where标签的应用（辅助元素），where内条件成立，拼接内部的动态SQL-->
    <select id="findRoles03" parameterType="string" resultType="role">
        select id role_name,as roleName,note from t_role
        <where>
            <if test="roleName!=null and roleName!=''">
                and  role_name like concat('%',#{roleName},'%')
            </if>
        </where>
    </select>
    <!--动态SQL之trim标签的应用（辅助元素），去掉特殊的SQL语法，列如and，or等-->
    <!--prefix元素语句的前缀，prefixOverrides元素代表需要去掉的字符串-->
    <select id="findRoles04" parameterType="string" resultType="role">
        select id role_name,as roleName,note from t_role
        <trim prefix="where" prefixOverrides="and">
            <if test="roleName!=null and roleName!=''">
                and  role_name like concat('%',#{roleName},'%')
            </if>
        </trim>
    </select>
    <!--动态SQl之set标签应用，对于联合主键，或者多个字段主键的数据更新，避免使用多条SQL进行更新-->
    <update id="updateRole01" parameterType="role">
        update t_role
        <set>
            <if test="roleName!=null and roleName!=''">
                role_name=#{roleName}
            </if>
            <if test="note!=null and note!=''">
                note=#{note}
            </if>
        </set>
        where role_no=#{roleNo}
    </update>
    <!--动态SQL之foreach标签的应用（循环遍历），能够很好的支持数组，list，set接口的几个，并且对此提供遍历功能。-->
    <!--foreac常用于in关键字（多值查询，包含查询，注意：对于大量数据，in会消耗大量性能）-->
    <select id="findUserBySex" resultType="role">
        select * from t_role where role_no in
        <foreach collection="roleNoList" item="roleNo" index="index" open="(" separator="," close=")">
            #{roleNo}
        </foreach>
    </select>

</mapper>